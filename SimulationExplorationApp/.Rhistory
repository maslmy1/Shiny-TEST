lofStats <- rbind(lofStats, lofStats.new)
}
parmCombos <- data.frame(beta = c(0.01, 0.05, 0.1),
sdErr = c(0.015, 0.05, 0.2),
Difficulty = c("Hard", "Medium", "Easy"))
lofStats <- data.frame("LOF" = NA, "Difficulty" = NA)
for(k in 1:nrow(parmCombos)){
sim.data_0.1 <- replicate(n = 1000,
simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 5,
xRange = c(1,20),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult"),
simplify = FALSE)
lofStats.new <- map(sim.data_0.1, calcLOF) %>% unlist() %>% as.matrix() %>% as.data.frame()
colnames(lofStats.new) <- c("LOF")
lofStats.new$Difficulty <- parmCombos[k, "Difficulty"]
lofStats <- rbind(lofStats, lofStats.new)
}
lofStats %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw()
shiny::runApp()
parmCombos <- data.frame(beta = c(0.01, 0.05, 0.1),
sdErr = c(0.005, 0.04, 0.19),
Difficulty = c("Hard", "Medium", "Easy"))
lofStats <- data.frame("LOF" = NA, "Difficulty" = NA)
for(k in 1:nrow(parmCombos)){
sim.data_0.1 <- replicate(n = 1000,
simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 5,
xRange = c(1,20),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult"),
simplify = FALSE)
lofStats.new <- map(sim.data_0.1, calcLOF) %>% unlist() %>% as.matrix() %>% as.data.frame()
colnames(lofStats.new) <- c("LOF")
lofStats.new$Difficulty <- parmCombos[k, "Difficulty"]
lofStats <- rbind(lofStats, lofStats.new)
}
lofStats %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw()
lofStats %>%
mutate(Difficulty = factor(Difficulty, levels = "Easy", "Medium", "Hard")) %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw()
lofStats %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw()
lofStats[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw()
lofStats[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw() +
ggtitle("Lack of Fit by Difficulty Level \n Exponential with Multiplicative Error")
parmCombos <- data.frame(beta = c(0.01, 0.05, 0.1),
sdErr = c(0.025, 0.1, 0.25),
Difficulty = c("Hard", "Medium", "Easy"))
lofStats <- data.frame("LOF" = NA, "Difficulty" = NA)
for(k in 1:nrow(parmCombos)){
sim.data_0.1 <- replicate(n = 1000,
simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 5,
xRange = c(1,20),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult"),
simplify = FALSE)
lofStats.new <- map(sim.data_0.1, calcLOF) %>% unlist() %>% as.matrix() %>% as.data.frame()
colnames(lofStats.new) <- c("LOF")
lofStats.new$Difficulty <- parmCombos[k, "Difficulty"]
lofStats <- rbind(lofStats, lofStats.new)
}
lofStats[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw() +
ggtitle("Lack of Fit by Difficulty Level \n Exponential with Multiplicative Error")
parmCombos <- data.frame(beta = c(0.01, 0.08, 0.15),
sdErr = c(0.025, 0.15, 0.25),
Difficulty = c("Hard", "Medium", "Easy"))
lofStats <- data.frame("LOF" = NA, "Difficulty" = NA)
for(k in 1:nrow(parmCombos)){
sim.data_0.1 <- replicate(n = 1000,
simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 5,
xRange = c(1,20),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult"),
simplify = FALSE)
lofStats.new <- map(sim.data_0.1, calcLOF) %>% unlist() %>% as.matrix() %>% as.data.frame()
colnames(lofStats.new) <- c("LOF")
lofStats.new$Difficulty <- parmCombos[k, "Difficulty"]
lofStats <- rbind(lofStats, lofStats.new)
}
lofStats[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw() +
ggtitle("Lack of Fit by Difficulty Level \n Exponential with Multiplicative Error")
parmCombos <- data.frame(beta = c(0.01, 0.05, 0.1),
sdErr = c(0.005, 0.05, 0.19),
Difficulty = c("Hard", "Medium", "Easy"))
lofStats <- data.frame("LOF" = NA, "Difficulty" = NA)
for(k in 1:nrow(parmCombos)){
sim.data_0.1 <- replicate(n = 1000,
simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 5,
xRange = c(1,20),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult"),
simplify = FALSE)
lofStats.new <- map(sim.data_0.1, calcLOF) %>% unlist() %>% as.matrix() %>% as.data.frame()
colnames(lofStats.new) <- c("LOF")
lofStats.new$Difficulty <- parmCombos[k, "Difficulty"]
lofStats <- rbind(lofStats, lofStats.new)
}
lofStats[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw() +
ggtitle("Lack of Fit by Difficulty Level \n Exponential with Multiplicative Error")
knitr::opts_chunk$set(echo = T, fig.width = 8, fig.height = 4, out.width = "100%", dpi = 300, message = F)
require(tidyverse)
require(gridExtra)
require(scales)
library(purrr)
# Exponential ---------------------------------------------------------------------------------------
simulate.exponential <-
function(N, xRange = c(1,N), nReps, alpha, beta, theta, muErr, sdErr, errorType, ...){
exp.data <- data.frame(x = rep(seq(xRange[1], xRange[2], length.out = N), nReps), y = NA)
if(errorType %in% c("Mult", "mult", "Multiplicative", "multiplicative")){
exp.data$y <- alpha*exp(beta*exp.data$x + rnorm(N*nReps, muErr, sdErr)) + theta
} else {
if(errorType %in% c("Add", "add", "Additive", "additive")){
exp.data$y <- alpha*exp(beta*exp.data$x) + theta + rnorm(N*nReps, muErr, sdErr)
}
}
return(exp.data)
}
# Quadratic ------------------------------------------------------------------------
simulate.quadratic <-
function(N, nReps, xRange = c(1,N), beta0, beta1, beta2, muErr, sdErr, ...){
quad.data <- data.frame(x = rep(seq(xRange[1], xRange[2], length.out = N), nReps), y = NA)
quad.data$y <- beta0 + beta1*quad.data$x + beta2*quad.data$x^2 + rnorm(N*nReps, muErr, sdErr)
return(quad.data)
}
# Overall Simulation Function ----------------------------------------------------------------
simulate.data <-
function(simulateFunction, ...){
sim.data <- simulateFunction(...)
}
# Evaluate Fit ---------------------------------------------------------------------
calcLOF <-
function(sim.data){
if(nrow(sim.data)/length(unique(sim.data$x)) > 1){
lof.mod <- lm(y ~ as.factor(x), data = sim.data)
lof <- anova(lof.mod) %>%
broom::tidy() %>%
filter(term == "as.factor(x)") %>%
select(statistic)
} else {
lof.mod <- NULL
lof <- NULL
}
return(lof)
}
sim.data.all <- data.frame("x" = NA, "y" = NA, "Difficulty")
sim.data.all <- data.frame("x" = NA, "y" = NA, "Difficulty")
for(k in 1:nrow(parmCombos)){
sim.data.new <- simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 5,
xRange = c(1,20),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult")
sim.data.new$Difficulty <- parmCombos[k, "Difficulty"]
sim.data.all <- rbind(sim.data.all, sim.data.new)
}
#Look at visuals
sim.data.all <- data.frame("x" = NA, "y" = NA, "Difficulty")
for(k in 1:nrow(parmCombos)){
sim.data.new <- simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 1,
xRange = c(1,20),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult")
sim.data.new$Difficulty <- parmCombos[k, "Difficulty"]
sim.data.all <- rbind(sim.data.all, sim.data.new)
}
k = 1
sim.data.new <- simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 1,
xRange = c(1,30),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult")
sim.data.new
sim.data.new$Difficulty <- parmCombos[k, "Difficulty"]
sim.data.new
sim.data.all
#Look at visuals
sim.data.all <- data.frame("x" = NA, "y" = NA, "Difficulty" = NA)
for(k in 1:nrow(parmCombos)){
sim.data.new <- simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 1,
xRange = c(1,30),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult")
sim.data.new$Difficulty <- parmCombos[k, "Difficulty"]
sim.data.all <- rbind(sim.data.all, sim.data.new)
}
sim.data.all
sim.data.all[-1,] %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty) +
scale_color_brewer(palette = "Paired")
sim.data.all[-1,] %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty, scale = "free") +
scale_color_brewer(palette = "Paired")
sim.data.all[-1,] %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty, scale = "free.x") +
scale_color_brewer(palette = "Paired")
sim.data.all[-1,] %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty, scale = "free.y") +
scale_color_brewer(palette = "Paired")
sim.data.all[-1,] %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty, scale.y = "free") +
scale_color_brewer(palette = "Paired")
sim.data.all[-1,] %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty, scale = "y.free") +
scale_color_brewer(palette = "Paired")
sim.data.all[-1,] %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty, scale = "free_y") +
scale_color_brewer(palette = "Paired")
#Look at visuals
sim.data.all <- data.frame("x" = NA, "y" = NA, "Difficulty" = NA)
for(k in 1:nrow(parmCombos)){
sim.data.new <- simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 1,
xRange = c(1,30),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult")
sim.data.new$Difficulty <- parmCombos[k, "Difficulty"]
sim.data.all <- rbind(sim.data.all, sim.data.new)
}
sim.data.all[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = "Easy", "Medium", "Hard")) %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty, scale = "free_y") +
scale_color_brewer(palette = "Paired")
#Identify parameters
parmCombos <- data.frame(beta = c(0.01, 0.05, 0.1),
sdErr = c(0.005, 0.05, 0.19),
Difficulty = c("Hard", "Medium", "Easy"))
#Look at visuals
sim.data.all <- data.frame("x" = NA, "y" = NA, "Difficulty" = NA)
for(k in 1:nrow(parmCombos)){
sim.data.new <- simulate.data(simulateFunction = simulate.exponential,
N = 20,
nReps = 1,
xRange = c(1,30),
# Exponential Parameters
alpha = 1,
beta = parmCombos[k, "beta"],
theta = 0,
# Quadratic Parameters
beta0 = 0,
beta1 = 0,
beta2 = 0.01,
muErr = 0,
sdErr = parmCombos[k, "sdErr"],
errorType = "mult")
sim.data.new$Difficulty <- parmCombos[k, "Difficulty"]
sim.data.all <- rbind(sim.data.all, sim.data.new)
}
sim.data.all
sim.data.all[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_grid(~Difficulty, scale = "free_y") +
scale_color_brewer(palette = "Paired")
sim.data.all[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = x, y = y, color = Difficulty)) +
geom_point(shape = 1) +
theme_bw() +
facet_wrap(~ Difficulty, scale = "free_y") +
scale_color_brewer(palette = "Paired")
sim.data.all[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = x, y = y)) +
geom_point(shape = 1) +
theme_bw() +
facet_wrap(~ Difficulty, scale = "free_y")
lofStats[-1,] %>%
mutate(Difficulty = factor(Difficulty, levels = c("Easy", "Medium", "Hard"))) %>%
ggplot(aes(x = LOF, fill = Difficulty, color = Difficulty)) +
geom_density(alpha = 0.7) +
scale_fill_brewer(palette = "Paired") +
scale_color_brewer(palette = "Paired") +
theme_bw() +
ggtitle("Lack of Fit by Difficulty Level \n Exponential with Multiplicative Error")
knitr::opts_chunk$set(echo = T, fig.width = 8, fig.height = 4, out.width = "100%", dpi = 300, message = F)
library(knitr)
require(tidyverse)
require(gridExtra)
require(scales)
library(purrr)
# Exponential ---------------------------------------------------------------------------------------
simulate.exponential <-
function(N, xRange = c(1,N), nReps, alpha, beta, theta, muErr, sdErr, errorType, ...){
exp.data <- data.frame(x = rep(seq(xRange[1], xRange[2], length.out = N), nReps), y = NA)
if(errorType %in% c("Mult", "mult", "Multiplicative", "multiplicative")){
exp.data$y <- alpha*exp(beta*exp.data$x + rnorm(N*nReps, muErr, sdErr)) + theta
} else {
if(errorType %in% c("Add", "add", "Additive", "additive")){
exp.data$y <- alpha*exp(beta*exp.data$x) + theta + rnorm(N*nReps, muErr, sdErr)
}
}
return(exp.data)
}
# Quadratic ------------------------------------------------------------------------
simulate.quadratic <-
function(N, nReps, xRange = c(1,N), beta0, beta1, beta2, muErr, sdErr, ...){
quad.data <- data.frame(x = rep(seq(xRange[1], xRange[2], length.out = N), nReps), y = NA)
quad.data$y <- beta0 + beta1*quad.data$x + beta2*quad.data$x^2 + rnorm(N*nReps, muErr, sdErr)
return(quad.data)
}
# Overall Simulation Function ----------------------------------------------------------------
simulate.data <-
function(simulateFunction, ...){
sim.data <- simulateFunction(...)
}
# Evaluate Fit ---------------------------------------------------------------------
calcLOF <-
function(sim.data){
if(nrow(sim.data)/length(unique(sim.data$x)) > 1){
lof.mod <- lm(y ~ as.factor(x), data = sim.data)
lof <- anova(lof.mod) %>%
broom::tidy() %>%
filter(term == "as.factor(x)") %>%
select(statistic)
} else {
lof.mod <- NULL
lof <- NULL
}
return(lof)
}
#Identify parameters
parmCombos <- data.frame(beta = c(0.01, 0.05, 0.1),
sdErr = c(0.005, 0.05, 0.19),
Difficulty = c("Hard", "Medium", "Easy"))
parmCombos %>% kable()
#Identify parameters
parmCombos <- data.frame(beta = c(0.01, 0.05, 0.1),
sdErr = c(0.005, 0.05, 0.19),
Difficulty = c("Hard", "Medium", "Easy"))
parmCombos %>% kable(format = "pandoc")
